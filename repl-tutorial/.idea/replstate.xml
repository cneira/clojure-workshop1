<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1439685519630">{:repl-history {:ide [], :local [&quot;\&quot;hu\&quot;&quot; &quot;\n(if true?  \&quot;yes\&quot;  \&quot;no\&quot; )\n&quot; &quot;(doc true? )&quot; &quot;(true? nil)&quot; &quot;(true? t)&quot; &quot;(true? true)&quot; &quot;(if (true?  nil ) \&quot;yes\&quot;  \&quot;no\&quot;  )&quot; &quot;(type true)&quot; &quot;(do \&quot;cat\&quot; \&quot;mouse\&quot; \&quot;trap\&quot; \&quot;poison\&quot;)&quot; &quot;(let [ cat \&quot;tom\&quot; mouse \&quot;jerry\&quot;  ]\n  \n    (let [ watcher \&quot;bill\&quot; ]\n      \n        (println \&quot; %s knows about %s %s\&quot; watcher  cat mouse)\n      )\n  )&quot; &quot;(let [ cat \&quot;tom\&quot; mouse \&quot;jerry\&quot;  ]\n  \n    (let [ watcher \&quot;bill\&quot; ]\n      \n        (println  watcher \&quot;knows about \&quot; cat mouse)\n      )\n  )&quot; &quot;(quote (+ 1 2))&quot; &quot;(def a \&quot;b\&quot;)&quot; &quot;(var a )&quot; &quot;(eval (var a )) &quot; &quot;(eval (var a ) ) &quot; &quot;(list 1 2 3 x t s g )\n&quot; &quot;(list 1 2 3 'x 't 's 'g )&quot; &quot;(list 1 2 3  (quote   x t s g ) )&quot; &quot;(list 1 2 3 'x 't 's 'g )\n&quot;], :remote []}}</component>
</project>